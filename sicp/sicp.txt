Axiomatic method, in logic, a procedure by which an entire system (e.g., a science) is generated in accordance with specified rules by logical deduction from certain basic propositions (axioms or postulates), which in turn are constructed from a few terms taken as primitive.Jul 20, 1998


00:30 Computer science is a terrible name. First, it's not a science. And it's also not about computers.

3:12 People in the future will recognize that people were really formalizing intuitions about process -- how to do things. Talking precisely about how to knowledge. As opposed to geometry that talks about what is true.

5:36 What's a process? A process is like a magical spirit that lives in the computer and does something. What directs a process is a pattern of rules called a procedure. Procedures are the spells. The programming language is the language for casting the spells.

7:25 Computer science is the business is in formalizing the "how to" imperative knowledge.

10:12 As opposed to the constraints in other kinds of engineering,  where the constraints of what you can build are the constraints of physical systems, the constraints imposed in building large software systems are the limitations of our own minds. 

10:55 Abstraction. Engineering technique whereby a "black box" can be used without knowing its implementation details. And these "black boxes" can be combined to create even more complex systems.

16:50 We're not only building boxes that input and output numbers. We're building boxes that can compute methods. We can have procedures whose values is another procedure.

18:14 Big Topic 1: Black-Box Abstraction

22:45 Big Topic 2: Conventional Interfaces

24:45 Big Topic 3: Metalinguistic Abstraction - making new languages

28:07 Learning a new language. Know: 1) primitive elements 2) means of combination and 3) means of abstraction.

29:58 Lisp's primitive data

38:45 Lisp's "define"

44:48 Lambda is Lisp's way of saying "make a procedure".

49:33 A key thing in Lisp is that you don't make arbitrary distinctions between things that happen to be primitive in the language and things that happen to be built in. So the things you construct get used with all the power and flexibility as if they were primitives.

51:13 How to make a case analysis i.e.conditionals. "cond" or "if"

59:05 An example problem: Heron's square root algorithm

1:08:54 Summary