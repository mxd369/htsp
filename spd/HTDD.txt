HOW TO DESIGN DATA (HTDD)

Data definitions are a driving element in the design recipes.

A data definition establishes the represent/interpret relationship between information and data:

Information in the program's domain is represented by data in the program.
Data in the program can be interpreted as information in the program's domain.
A data definition must describe how to form (or make) data that satisfies the data definition and also how to tell whether a data value satisfies the data definition. It must also describe how to represent information in the program's domain as data and interpret a data value as information.

So, for example, one data definition might say that numbers are used to represent the Speed of a ball. Another data definition might say that numbers are used to represent the Height of an airplane. So given a number like 6, we need a data definition to tell us how to interpret it: is it a Speed, or a Height or something else entirely. Without a data definition, the 6 could mean anything.

The first step of the recipe is to identify the inherent structure of the information.

Once that is done, a data definition consists of four or five elements:

A possible structure definition (not until compound data)
A type comment that defines a new type name and describes how to form data of that type.
An interpretation that describes the correspondence between information and data.
One or more examples of the data.
A template for a 1 argument function operating on data of this type.
In the first weeks of the course we also ask you to include a list of the template rules used to form the template.



================================



DATA DRIVEN TEMPLATES

Templates are the core structure that we know a function must have, independent of the details of its definition. In many cases the template for a function is determined by the type of data the function consumes. We refer to these as data driven templates. The recipe below can be used to produce a data driven template for any type comment.

For a given type TypeName the data driven template is:

(define (fn-for-type-name x)
  <body>)
Where x is an appropriately chosen parameter name (often the initials of the type name) and the body is determined according to the table below. To use the table, start with the type of the parameter, i.e. TypeName, and select the row of the table that matches that type. The first row matches only primitive types, the later rows match parts of type comments.

(Note that when designing functions that consume additional atomic parameters, the name of that parameter gets added after every ... in the template. Templates for functions with additional complex paremeters are covered in Functions on 2 One-Of Data.)

Type of data	cond question (if applicable)	Body or cond answer (if applicable)
Atomic Non-Distinct

Number
String
Boolean
Image
interval like Number[0, 10)
etc.
Appropriate predicate

(number? x)
(string? x)
(boolean? x)
(image? x)
(and (<= 0 x)
     (< x 10))
etc.
Expression that operates on the parameter.

(... x)

Atomic Distinct Value

"red"
false
empty
etc.
Appropriate predicate

(string=? x "red")
(false? x)
(empty? x)
etc.
Since value is distinct, parameter does not appear.

(...)

One Of

enumerations
itemizations
Cond with one clause per subclass of one of.

(cond [<question1> <answer1>]
      [<question2> <answer2>])

Where each question and answer expression is formed by following the rule in the question or answer column of this table for the corresponding case. A detailed derivation of a template for a one-of type appears below.

It is permissible to use else for the last question for itemizations and large enumerations. Normal enumerations should not use else.

Note that in a mixed data itemization, such as

;; Measurement is one of:
;; - Number[-10, 0)
;; - true
;; - Number(0, 10]

the cond questions must be guarded with an appropriate type predicate. In particular, the first cond question for Measurement must be

(and (number? m)
     (<= -10 m)
     (< m 0))

where the call to number? guards the calls to <= and <. This will protect <= and < from ever receiving true as an argument.

Compound

Position
Firework
Ball
cons
etc.
Predicate from structure

(posn? x)
(firework? x)
(ball? x)
(cons? x) (often just else)
etc.
All selectors.

(... (posn-x x) (posn-y x))
(... (firework-y x) (firework-color x))
(... (ball-x x) (ball-dx x))
(... (first x) (rest x))
etc.

Then consider the result type of each selector call and wrap the accessor expression appropriately using the table with that type. So for example, if after adding all the selectors you have:

(... (game-ball g) ;produces Ball
     (game-paddle g)) ;produces Paddle

Then, because both Ball and Paddle are non-primitive types (types that you yourself defined in a data definition) the reference rule (immediately below) says that you should add calls to those types' template functions as follows:

(... (fn-for-ball (game-ball g))
     (fn-for-paddle (game-paddle g)))

Other Non-Primitive Type Reference

Predicate, usually from structure definition

(firework? x)
(person? x)
Call to other type's template function

(fn-for-firework x)
(fn-for-person x)
Self Reference

Form natural recursion with call to this type's template function:

(fn-for-los (rest los))
Mutual Reference


Note: form and group all templates in mutual reference cycle together.

Call to other type's template function:

(fn-for-lod (dir-subdirs d)
(fn-for-dir (first lod))

Producing the Template for an Example One Of Type

In many cases more than one of the above rules will apply to a single template. Consider this type comment:

;; Clock is one of:
;; - Natural
;; - false

and the step-by-step construction of the template for a function operating on Clock.

(define (fn-for-clock c)
  (cond [Q A]
        [Q A]))

;; Template rules used:
;;  - one of: 2 cases
      
Clock is a one of type with two subclasses (one of which is not distinct making it an itemization). The one of rule tells us to use a cond. The cond needs one clause for each subclass of the itemization.
(define (fn-for-clock c)
  (cond [(number? c) (... c)]
        [Q A]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic non-distinct: Natural
      
The cond questions need to identify each subclass of data. The cond answers need to follow templating rules for that subclasses data. In the first subclass, Natural is a non-distinct type; the atomic non-distinct rule tells us the question and answer as shown to the left.

(define (fn-for-clock c)
  (cond [(number? c) (... c)]
        [else
         (...)]))

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic non-distinct: Natural
;;  - atomic distinct: false
      
In the second case false is an atomic distinct type, so the atomic-distinct rule gives us the question and answer. Since the second case is also the last case we can use else for the question.

Templates for Mutually Referential Types

The previous example doesn't cover the mutual-reference rule (), which says that in the case of mutually self-referential data definitions, when you template one function in the self-reference cycle you should immediately template all the functions in the self-reference cycle. So, for example, given:

(define-struct person (name subs))
;; Person is (make-person String ListOfPerson)

;; ListOfPerson is one of:
;;  - empty
;;  - (cons Person ListOfPerson)
Then if you need a template for a function operating on a Person (or a function operating on a ListOfPerson) you should immediately write a template for both functions, resulting in something like this:

#;
(define (fn-for-person p)
  (... (person-name p)
       (fn-for-lop (person-subs p))))  ;mutual recursion from mutual-reference

#;
(define (fn-for-lop lop)
  (cond [(empty? lop) ...]
        [else
         (... (fn-for-person (first lop))  ;mutual recursion from mutual-reference
              (fn-for-lop (rest lop)))]))  ;natural recursion from self-reference
(Note that producing that template will also involve using the atomic-distinct, atomic, one-of and compound rules.)

As with self-reference, its a good idea to draw a mutual-reference line on the data definition and ensure you have corresponding mutual recursion lines in your templates.

Testing

The principles above can also be used to understand how many tests a data definition implies. Simply put, the set of tests/examples should cover all cases, call all helper functions, involve all selectors, and avoid duplicated values.

Additional Design Rules for Helpers

During coding three additional guidelines suggest situations under which a helper function should be added:

Use a separate function for each difference between quantities in a problem.
If a subtask requires operating on arbitrary sized data a helper function must be used.
If a subtask involves special domain knowledge a helper function should be used.
In addition always keep the "one task per function" goal in mind. If part of a function you are designing seems to be a well-defined subtask put that into a helper function.

Back to Design Recipes Table
FUNCTIONS ON 2 ONE-OF DATA

This page outlines the variations in the normal HtDF recipe when designing a function that consumes 2 data that have a one-of in their type comments. Examples of functions for which this applies include functions with the following signatures:

;; ListOfString ListOfString -> Boolean
;; ListOfString ListOfString -> ListOfString
;; ListOfString BinaryTree -> Boolean
;; ListOfNatural FamilyTree -> ListOfString
For the purpose of this explanation, assume that the goal is to design a function that consumes two ListOfString and produces true if the strings in the first list are equal to the corresponding strings in the second list. If that is true and the second list is longer than the first the function should produce true; if the second list is shorter it always produces false. 

The first three steps of the recipe - signature, purpose and stub - are unchanged.

;; ListOfString ListOfString -> Boolean
;; produce true if lsta is a prefix of lstb

(define (prefix=? lsta lstb) false)

But at this point the next step is to form a cross-product of type comments table as follows. The row labels of the table are the cases of the one-of type comment for one argument (perhaps the first), and the column labels are the cases of the one-of type comment for the other argument. 

;; CROSS PRODUCT OF TYPE COMMENTS TABLE
;;
;;                                     lstb
;;                           empty           (cons String LOS)                
;;                                         |
;; l   empty                               |
;; s                         --------------------------------
;; t   (cons String LOS)                   |
;; a                                       |

In this case, where both arguments have 2 cases in their one-of type comments, the cross-product formed has 4 cells (2 * 2 = 4). The next step of the process is to use the cross product table to help form at least as many tests as there are cells. The upper left cell describes a scenario where both lsta and lstb are empty. The lower left cell is where lsta is non-empty but lstb is empty and so on. The lower right cell is where both lists are non-empty, and this case requires more than one test. So we end up with: 

(check-expect (prefix=? empty empty) true)
(check-expect (prefix=? empty (list "a" "b")) true)
(check-expect (prefix=? (list "a") empty) false)

(check-expect (prefix=? (list "a") (list "b")) false)
(check-expect (prefix=? (list "a") (list "a")) true)
(check-expect (prefix=? (list "a" "b") (list "a" "x")) false)
(check-expect (prefix=? (list "a" "b") (list "a" "b")) true)
We can now use the tests to help fill in the contents of the table cells, indicating what the function should do in each case.  Any cell requiring a more complex code answer, such as the lower right one in this case, need not be coded perfectly with correct syntax, but should give a good idea of what the code must do.
;; CROSS PRODUCT OF TYPE COMMENTS TABLE
;;
;;                                     lstb
;;                           empty           (cons String LOS)                
;;                                         |
;; l   empty                   true        |  true
;; s                         --------------------------------
;; t   (cons String LOS)       false       |  (and <firsts are string=?>
;; a                                       |       <rests are prefix=?>)
Now comes the most fun step. We look for a way to simplify the table by identifying cells that have the same answer. In this case the entire first row produces true, so we can simplify the table by combining the two cells in the first row into a single cell:
;; CROSS PRODUCT OF TYPE COMMENTS TABLE
;;
;;                                     lstb
;;                           empty           (cons String LOS)                
;;                                         |
;; l   empty                              true
;; s                         --------------------------------
;; t   (cons String LOS)       false       |  (and <firsts are string=?>
;; a                                       |       <rests are prefix=?>)
Now we are almost done. The next step is to code the function body directly from the table. This in effect intertwines templating with coding of details. Because the simplified table has only three cells, we know that the body of the function will be a three case cond. For the first question we always pick the largest cell, in this case the top row. The question needs to be true of the entire combined cell, so in this case the question is (empty? lsta). The answer in this case is just true.
For the next case of the cond we pick the lower left cell. At this point, we know that the top row has been handled, so we only need a question that distinguishes the remaining cells apart. In this case (empty? lstb) distinguishes the lower left from the lower right cell. The answer in this case is false.
In larger tables this process continues until you get to the last cell, at which point the question can be else.
In cells that involve natural recursion, the natural recursion can be formed by applying the normal rules for handling self-reference. In this case the template for the cond answer in the third cond case is:
              (... (first lsta)
                   (first lstb)
                   (prefix=? (rest lsta) ...)
                   (prefix=? ... (rest lstb)))
After filling that in we end up with:
(define (prefix=? lsta lstb)
  (cond [(empty? lsta) true]
        [(empty? lstb) false]
        [else
         (and (string=? (first lsta) (first lstb))
              (prefix=? (rest lsta)
                        (rest lstb)))]))
In general, when designing a function on 2 one of data it is a good idea to include the cross-product table in the design.